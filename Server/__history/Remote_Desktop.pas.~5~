unit Remote_Desktop;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.ComCtrls;

type
  TURemote_Desktop = class(TForm)
    StatusBar_APP: TStatusBar;
    Pnl_Bottom: TPanel;
    Radio_Remote: TRadioGroup;
    Btn_OK: TBitBtn;
    CheckBox_MouseRemote: TCheckBox;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    CheckBox3: TCheckBox;
    CheckBox4: TCheckBox;
    CheckBox5: TCheckBox;
    CheckBox6: TCheckBox;
    CheckBox7: TCheckBox;
    CheckBox8: TCheckBox;
    CheckBox9: TCheckBox;
    CheckBox10: TCheckBox;
    CheckBox11: TCheckBox;
    Pnl_Top: TPanel;
    procedure FormShow(Sender: TObject);
    procedure Btn_OKClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  URemote_Desktop: TURemote_Desktop;

implementation

uses
  Main;

{$R *.dfm}

procedure TURemote_Desktop.Btn_OKClick(Sender: TObject);
begin
 with Btn_OK do
  begin
    case Tag of
      0 : begin


      end;

      0 : begin


      end;
      0 : begin


      end;
      0 : begin


      end;

    end;
  end;
end;

procedure TURemote_Desktop.FormShow(Sender: TObject);
begin
 if UMain.Serv_Sock.Active then
  StatusBar_APP.Panels.Items[1].Text := 'Server is Activated , Server is Listening...,Connections on the Port: ' + intToStr(UMain.Serv_Sock.Port) else
  StatusBar_APP.Panels.Items[1].Text := 'Server is Stopped';
end;

end.
