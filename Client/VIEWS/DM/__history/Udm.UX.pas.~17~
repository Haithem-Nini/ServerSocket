unit Udm.UX;

interface

uses
  System.SysUtils,
  System.Classes,
  System.Actions,
  Vcl.ActnList,
  Vcl.ExtCtrls,
  System.Win.ScktComp,
//
  Base.Main;

type
  Tdm_UX = class(TDataModule)
    ActionLst_Client: TActionList;
    Act_Switcher: TAction;
    CSock_Main: TClientSocket;
    Timer_AutoReconnect: TTimer;
    procedure Act_SwitcherExecute(Sender: TObject);
    procedure Timer_AutoReconnectTimer(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
    procedure CSock_MainRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure CSock_MainError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CSock_MainDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CSock_MainConnecting(Sender: TObject; Socket: TCustomWinSocket);
    procedure CSock_MainConnect(Sender: TObject; Socket: TCustomWinSocket);
  private
    { Private declarations }
    procedure Client_Switcher(aClient: TClientSocket);
    procedure Update_UI(aState: Boolean);
    function GetMainForm: TBaseMain;
  public
    { Public declarations }
    property APP: TBaseMain read GetMainForm; // ReadOnly ..!!
  end;

var
  dm_UX: Tdm_UX;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure Tdm_UX.Act_SwitcherExecute(Sender: TObject);
begin
  Client_Switcher(CSock_Main);

 if CheckBox_AutoReconnect.Checked then
   Timer_AutoReconnect.Enabled := True
 else
   Timer_AutoReconnect.Enabled := False;
end;

procedure Tdm_UX.CSock_MainConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  StatusBar_APP.Panels.Items[1].Text := 'Client is Connected on Server IP: ' +Socket.LocalHost;
  Btn_Connect.Enabled:= True;
end;

procedure Tdm_UX.CSock_MainConnecting(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  StatusBar_APP.Panels.Items[1].Text := 'Connecting...';
  Btn_Connect.Enabled:= False;
end;

procedure Tdm_UX.CSock_MainDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  StatusBar_APP.Panels.Items[1].Text := 'Client is Stopped';
//==========
  Btn_Connect.Caption := 'Start Client';
  Edt_Port.Enabled:= True;
  Edt_Host.Enabled:= True;
  Btn_Connect.Tag := 0;
end;

procedure Tdm_UX.CSock_MainError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
  StatusBar_APP.Panels.Items[1].Text := 'Connection Error !!';
//==========
  Btn_Connect.Enabled:= True;
  Btn_Connect.Caption := 'Start Client';
  Edt_Port.Enabled:= True;
  Edt_Host.Enabled:= True;
  Btn_Connect.Tag := 0;
end;

procedure Tdm_UX.CSock_MainRead(Sender: TObject; Socket: TCustomWinSocket);
var
  StrCommand: string;
begin
  StrCommand := Socket.ReceiveText;
//=======
  if StrCommand = '22' then
  begin
    CSock_Main.Active := False;
  end;
//=======
end;

procedure Tdm_UX.DataModuleDestroy(Sender: TObject);
begin
  if CSock_Main.Active then CSock_Main.Active := False;
end;

function Tdm_UX.GetMainForm: TBaseMain;
begin
  Result := (Application.MainForm as TBase_Main);
end;

procedure Tdm_UX.Timer_AutoReconnectTimer(Sender: TObject);
begin
 if not CSock_Main.Active then
    CSock_Main.Active := True;
end;

{$REGION '  Client On Switch Event..'}
procedure Tdm_UX.Client_Switcher(aClient: TClientSocket);
begin
  if not (aClient.Active) then
  begin
    aClient.Host   := Edt_Host.Text;
    aClient.Port   := strToInt(Edt_Port.Text);
    aClient.Active := True;
    Update_UI(True);
  end else begin
    aClient.Active := False;
    Update_UI(False);
  end;
end;

procedure Tdm_UX.Update_UI(aState: Boolean);
begin
  if aState then begin
    StatusBar_APP.Panels.Items[1].Text := 'Connected Successfully...';
    Btn_Connect.Enabled := False;
    Edt_Host.Enabled := False;
    Edt_Port.Enabled := False;
    Edt_Password.Enabled := False;
    Edt_Client_ID.Enabled := False;
  end else begin
    StatusBar_APP.Panels.Items[1].Text := 'Disconnected !!';
    Btn_Connect.Enabled := True;
    Edt_Host.Enabled := True;
    Edt_Port.Enabled := True;
    Edt_Password.Enabled := True;
    Edt_Client_ID.Enabled := True;
  end;
end;
{$ENDREGION}

end.
